#define LOG_TAG "ModbusService"
#include "jni.h"
#include "JNIHelp.h"
#include "android_runtime/AndroidRuntime.h"
#include <utils/misc.h>
#include <utils/Log.h>
#include <hardware/hardware.h>
#include <hardware/modbus.h>
#include <stdio.h>

namespace android
{
    struct modbus_device_t *modbus_device = NULL;

    static void modbus_writeReg(JNIEnv *env, jobject clazz, jcharArray value, jint len, jchar num) {

        ALOGI("Modbus JNI: set value %s to device reg.",value);

        if(!modbus_device) {
            ALOGI("Modbus JNI: device is not open.");
            return ;
        }

        modbus_device->write_reg(modbus_device, value, len);
    }

    static jboolean modbus_readReg(JNIEnv *env, jobject clazz, jcharArray value, jint len, jchar num) {

        if(!modbus_device) {
            ALOGI("Modbus JNI: device is not open.");
            return false;
        }

        modbus_device->read_reg(modbus_device, value, len);

        return true;
    }

    static inline int modbus_device_open(const hw_module_t *module, struct modbus_device_t **device) {
        return module->methods->open(module, MODBUS_HARDWARE_MODULE_ID, (struct hw_device_t **)device);
    }

    static jboolean modbus_init(JNIEnv *env, jclass clazz) {
        modbus_module_t *module;

        ALOGI("Modbus JNI: initialing...");
        if(hw_get_module(MODBUS_HARDWARE_MODULE_ID, (const struct hw_module_t **)&module) == 0) {
            ALOGI("Modbus JNI: modbus stub found.");
            if(modbus_device_open(&(module->common), &modbus_device) == 0) {
                ALOGI("Modbus JNI:modbus device is open.");
                return 0;
            }
            ALOGE("Modbus JNI: failed to open modbus device.");
            return -1;
        }
        ALOGE("Modbus JNI: failed to get modbus stub module.");
        return -1;
    }

    static const JNINativeMethod method_table[] = {
        {"init_native", "()Z", (void *)modbus_init},
        {"writeReg_native", "(Ljava/lang/String;I)V", (void *)modbus_writeReg},
        {"readReg_native", "(I)Ljava/lang/String;", (void *)modbus_readReg},
    };

    int register_android_server_ModbusService(JNIEnv *env) {
        return jniRegisterNativeMethods(env, "com/android/server/ModbusService", method_table, NELEM(method_table));
    }
};
